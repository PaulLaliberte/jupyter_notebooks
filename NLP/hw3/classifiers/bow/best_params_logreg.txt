{'features__transformer_list': [('counts', CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=15, max_features=None, min_df=1,
        ngram_range=(1, 2), preprocessor=None, stop_words='english',
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None))], 'features__counts__min_df': 1, 'classifier__warm_start': False, 'features__n_jobs': 1, 'features__counts__ngram_range': (1, 2), 'features__counts__preprocessor': None, 'features__counts__max_features': None, 'features__counts__lowercase': True, 'classifier__verbose': 0, 'features': FeatureUnion(n_jobs=1,
       transformer_list=[('counts', CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=15, max_features=None, min_df=1,
        ngram_range=(1, 2), preprocessor=None, stop_words='english',
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None))],
       transformer_weights=None), 'classifier__multi_class': 'ovr', 'features__counts__input': 'content', 'classifier__penalty': 'l2', 'memory': None, 'classifier__dual': False, 'features__counts__token_pattern': '(?u)\\b\\w\\w+\\b', 'features__counts__vocabulary': None, 'features__counts__stop_words': 'english', 'classifier__C': 0.5, 'features__counts__strip_accents': None, 'features__counts__decode_error': 'strict', 'classifier__max_iter': 100, 'classifier__fit_intercept': True, 'steps': [('features', FeatureUnion(n_jobs=1,
       transformer_list=[('counts', CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=15, max_features=None, min_df=1,
        ngram_range=(1, 2), preprocessor=None, stop_words='english',
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None))],
       transformer_weights=None)), ('classifier', LogisticRegression(C=0.5, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False))], 'classifier__tol': 0.0001, 'classifier__n_jobs': 1, 'classifier__class_weight': None, 'features__counts__analyzer': 'word', 'features__counts__dtype': <class 'numpy.int64'>, 'features__counts__max_df': 15, 'features__counts': CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=15, max_features=None, min_df=1,
        ngram_range=(1, 2), preprocessor=None, stop_words='english',
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None), 'classifier__intercept_scaling': 1, 'features__counts__encoding': 'utf-8', 'classifier': LogisticRegression(C=0.5, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False), 'features__counts__binary': False, 'classifier__random_state': None, 'features__counts__tokenizer': None, 'features__transformer_weights': None, 'classifier__solver': 'liblinear'}